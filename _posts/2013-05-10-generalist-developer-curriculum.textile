---
layout: post
title: Generalist Developer Curriculum
summary: What every web developer should know
---

This is a take off "What CS Majors Should Know" and "Teach Yourself Programming in Ten Years"
http://matt.might.net/articles/what-cs-majors-should-know/
http://www.mindmeister.com/151175205
http://norvig.com/21-days.html

Concerns:
Become a very productive and pragmatic developer
Focus on doing stuff, and not memorizing stuff
Keep track of things learned

I'll revise this as my interests change, time permitting. This is more of a self-study guide for the things that seem important at the time.

Programming Languages
I know Ruby pretty decently. I'd like to become fluent in Javascript, CoffeeScript, and a functional language like Scala or Haskell. 
Contribute to Rails
Work with a 3rd party API
Do a Hackathon
Help someone else with a hard programming problem

Tools
vim
	vimtutorial
	vimcasts
tmux

Ruby
rubykoans
Michael Hartl Rails tutorial
railscasts
rubyweekly

Rails
write a pet project as a piece of art, with a substantial enough codebase

Javascript
JavaScript: The Definitive Guide by Flanagan
The Good Parts Douglas Crockford
Effective JavaScript: 68 Specific Ways to Harness the Power of JavaScript by Herman.
JSHint
coffeescript
node

HTML/CSS
bootstrap
haml / thin / erb
css / sass / less

Unix
write simple shell scripts.
navigate and manipulate the filesystem
grep
man

System Admin
set up a development machine "in the cloud" (probably AWS or digitalocean)
install and administer linux distro
troubleshoot a connection with dig, ping, traceroute
compile and configure a webserver like apache
maintain a website with a text editor

Databases
postgresql
mongodb

Fundamentals
Data Structures - go through and implement all data structures in ruby
Algorithms - go through the greatest hits, implementing in Ruby. hash table, linked list, tree, binary search trees, directed and undirected graphs
CLRS
Discrete Math - trees, graphs, formal languages, automata
Theory - finite-state automata, regex, pushdown automata, context-free languages, formal grammars, Turing machines, lambda calculus, undecidability,
the difference between P, NP, NP-Hard, NP-Complete
make a compiler
make a programming language
SICP

Security
matasano crypto challenge
social engineering
buffer overflow
integer overflow
code injection vulnerabilities
race conditions
privilege confusion
Metasploit: The Penetration Tester's Guide by Kennedy, O'Gorman, Kearns and Aharoni

Cryptography
symmetric-key cryptosystems
public-key cryptosystems
secure hash functions
challenge-response authentication
digital signature algorithms
threshold cryptosystems

Linear Algebra
linear programming
machine learning
artificial intelligence
